В xsd схемах описана бизнесс-модель, с которой работает наша система. Это операции поступления на счет, и списания с счета.
У операции есть тип - приход/расход, номер счета, сумма, клиент (в виде имени, фамилии, номера паспорта).
Необходимо обработать этот запрос и отправить ответ (SrvBankAccountTransactionRs). Если все хорошо - то
SrvBankAccountTransactionRs.resultId = 0, иначе resultId > 0 и добавить элементы в errorList (коды ошибок и их описания
можно придумать самому, для примера, технические ошибки (отвалилась база, не разбирается xml) код = 1; логические ошибки
(не найден в базе клиент и тд) код=2).

Итак, задание
1) Через JMS приходит текстовое сообщение типа SrvBankAccountTransactionRq. Нужно его разобрать и сделать соответствующие
записи в базе данных. В БД есть таблицы клиентов (первичный ключ - паспорт), номер счета (пусть первичным ключом будет сам номер),
и таблица движений (тип операции - пусть будет текстовым полем). Нужно сделать базу и забить ее тестовыми данными. Запрос
нужно разложить на эту базу данных. Думаю маппинг полей xml на базу вполне понятен. После обработки запроса в ответную очередь
послыается ответ. Если входящее сообщение не получилось обработать (например битый текст), то его отправить в очередь мертвых
сообщений.

2) Сделать REST-сервис, который:
  - заводит нового клиента. Ругаться, если такой уже есть. Путь service/client/add. Метод POST
  - покажет движения по счету для клиента. Путь вида service/transactions?passportNumber=444. Метод GET
 
3) Сделать SOAP сервис, который работает аналогично работе приема сообщений по JMS. То есть запрос приходит через SOAP,
и ответ тоже "направлять" в SOAP.

Как-то так. Теперь технические требования, которых надо придерживаться.

1) Писать на java8, spring boot. В качестве БД взять Postgresql или MySQL. В качестве брокера сообщений ActiveMq.
 Сборщик - Maven. Залить на github.
2) НЕ СОЗДАВАТЬ руками классы, описанные в xsd. Сделать их автоматическую генерацию через maven plugin - maven-jaxb2-plugin.
3) При работе с базой следовать следующим правилам (сугубо для того, чтобы попробовать разные варианты) - при обработке
запроса, записывать в базу используя JPA. При получении истории сообщений использовать NamedParameterJdbcTemplate. При
добавлении нового клиента - вызывать хранимую процедуру (которую сами же и напишите в БД).
4) Написать тесты на JUnit и mockito. Добится покрытия в минимум 80%. Для этого прикрутите jacoco через jacoco-maven-plugin.
Через него можно смотреть покрытие.
5) Логировать все операции

Когда сделаете это, можно расширить задание для получения полного дзена. Дополнительно можно сделать следующее:
 1) Прикрутить mongoDb. В нее писать "сырой" запрос, до обработки. Поля - ид, дата, xml текст.
 2) Сделать деплой проекта на wildfly
 3) Сделать деплой проекта на wildfly в docker контейнере.

Ну и также посмотреть как можно заменить maven на gradle (не обязательно, сам ни разу не делал). Прикрутить logback,
подключить стек ELK (Требуется часто, сам не делал, но часто пользовадся).
Ну и попробовать spring cloud - подумать как эту задачу переделать на микросервисы и можно ли вообще.
